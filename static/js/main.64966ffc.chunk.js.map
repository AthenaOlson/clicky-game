{"version":3,"sources":["components/Header/Header.js","components/Alerts/Alerts.js","components/Score/Score.js","components/Main/Main.js","components/Footer/Footer.js","components/Card/Card.js","components/App/App.js","serviceWorker.js","index.js"],"names":["popoverLeft","react_default","a","createElement","Popover_default","id","Header","props","className","OverlayTrigger_default","trigger","placement","overlay","Button_default","Alerts","Alert_default","bsStyle","concat","alertType","message1","message2","Score","shake","score","topScoreType","topScore","Main","children","Footer","href","target","rel","Card","onClick","increment","shuffle","src","image","alt","name","App","state","cards","selected","_this","setState","sort","b","Math","random","incrementClick","includes","setTimeout","this","bind","Object","assertThisInitialized","push","newScore","_this2","components_Header_Header","components_Alerts_Alerts","components_Score_Score","components_Main_Main","map","i","components_Card_Card","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WAQMA,EACFC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASG,GAAG,2BACRJ,EAAAC,EAAAC,cAAA,mCAAkCF,EAAAC,EAAAC,cAAA,WADtC,uEAuBWG,EAjBA,SAAAC,GAAK,OAChBN,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cACdP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAgBQ,QAAQ,QAAQC,UAAU,OAAOC,QAASZ,GACtDC,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQM,UAAU,wBAClBP,EAAAC,EAAAC,cAAA,uBAKRF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAAf,uCCbOM,EARA,SAAAP,GAAK,OAChBN,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAOc,QAAO,GAAAC,OAAKV,EAAMW,YACrBjB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,cAASI,EAAMY,UADnB,IACuCZ,EAAMa,YCWtCC,UAfD,SAAAd,GAAK,OACfN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACXP,EAAAC,EAAAC,cAAA,UAAQE,GAAIE,EAAMe,MAAOd,UAAS,+BAAAS,OAAiCV,EAAMW,YACrEjB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,QAAMK,UAAU,SAASD,EAAMgB,SAE7CtB,EAAAC,EAAAC,cAAA,UAAQK,UAAS,+BAAAS,OAAiCV,EAAMiB,eACpDvB,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,QAAMK,UAAU,SAASD,EAAMkB,gBCD9CC,UARF,SAAAnB,GAAK,OACdN,EAAAC,EAAAC,cAAA,QAAMK,UAAS,GAAAS,OAAKV,EAAMe,QACtBrB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACVD,EAAMoB,aCeJC,UAnBA,SAAArB,GAAK,OAChBN,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,gBACVP,EAAAC,EAAAC,cAAA,KAAG0B,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAC/C9B,EAAAC,EAAAC,cAAA,KAAGK,UAAU,wBAEjBP,EAAAC,EAAAC,cAAA,KAAG0B,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBACrE9B,EAAAC,EAAAC,cAAA,KAAGK,UAAU,yBAEjBP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAPnB,+BCGDwB,UANF,SAAAzB,GAAK,OACdN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBAAqByB,QAAW,WAAQ1B,EAAM2B,UAAU3B,EAAMF,IAAKE,EAAM4B,QAAQ5B,EAAMF,MAClGJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAAa4B,IAAK7B,EAAM8B,MAAOC,IAAK/B,EAAMgC,kBCqHlDC,6MA/GbC,MAAQ,CACNC,QACAnB,MAAO,EACPE,SAAU,EACVkB,SAAU,GACVrB,MAAO,GACPH,SAAU,2BACVC,SAAU,GACVF,UAAW,OACXM,aAAc,UAIlBW,QAAU,SAAA9B,GACRuC,EAAKC,SAAS,CACZH,MAAOE,EAAKH,MAAMC,MAAMI,KAAK,SAAS5C,EAAE6C,GACtC,MAAO,GAAMC,KAAKC,gBAMxBC,eAAiB,SAAA7C,GAIb,GAHQuC,EAAKH,MAAME,SACCQ,SAAS9C,GAsCzBuC,EAAKC,SAAS,CACVtB,MAAO,EACPoB,SAAU,GACVrB,MAAO,YACPH,SAAU,SACVC,SAAU,4BACVF,UAAW,SACXM,aAAc,SAElB4B,WAAW,WACPC,KAAKR,SAAS,CAAEvB,MAAO,MACzBgC,KAFSC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAX,KAEG,SA/CJ,CACZA,EAAKH,MAAME,SAASc,KAAKpD,GACzB,IAAIqD,EAAWd,EAAKH,MAAMlB,MAAQ,EAClCqB,EAAKC,SAAS,CAACtB,MAAOmC,IAER,KAAbA,EACDd,EAAKC,SAAS,CACZtB,MAAO,EACPoB,SAAU,GACVlB,SAAUiC,EACVvC,SAAU,WACVC,SAAU,GACVF,UAAW,YAIPwC,EAAWd,EAAKH,MAAMhB,SAC5BmB,EAAKC,SAAS,CACZpB,SAAUiC,EACVvC,SAAU,OACVC,SAAU,yBACVF,UAAW,UACXM,aAAc,YAKhBoB,EAAKC,SAAS,CACZ1B,SAAU,OACVC,SAAU,yBACVF,UAAW,UACXM,aAAc,mFAmBZ,IAAAmC,EAAAN,KACN,OACEpD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACyD,EAAD,MACA3D,EAAAC,EAAAC,cAAC0D,EAAD,CACE1C,SAAUkC,KAAKZ,MAAMtB,SACrBC,SAAUiC,KAAKZ,MAAMrB,SACrBF,UAAWmC,KAAKZ,MAAMvB,YAExBjB,EAAAC,EAAAC,cAAC2D,EAAD,CACExC,MAAO+B,KAAKZ,MAAMnB,MAClBC,MAAO8B,KAAKZ,MAAMlB,MAClBE,SAAU4B,KAAKZ,MAAMhB,SACrBP,UAAWmC,KAAKZ,MAAMvB,UACtBM,aAAc6B,KAAKZ,MAAMjB,eAE3BvB,EAAAC,EAAAC,cAAC4D,EAAD,CACEzC,MAAO+B,KAAKZ,MAAMnB,OAEjB+B,KAAKZ,MAAMC,MAAMsB,IAAI,SAACtB,EAAMuB,GAAP,OACpBhE,EAAAC,EAAAC,cAAC+D,EAAD,CACE7D,GAAIqC,EAAMrC,GACVkC,KAAMG,EAAMH,KACZF,MAAOK,EAAML,MACb8B,IAAKF,EACL/B,UAAWyB,EAAKT,eAAgBf,QAASwB,EAAKxB,aAIlDlC,EAAAC,EAAAC,cAACiE,EAAD,cA3GQC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.64966ffc.chunk.js","sourcesContent":["\n// IMPORTS\nimport React from 'react';\nimport \"./Header.css\";\nimport Popover from 'react-bootstrap/lib/Popover';\nimport OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger';\nimport Button from 'react-bootstrap/lib/Button';\n// \nconst popoverLeft = (\n    <Popover id=\"popover-positioned-left\">\n        <strong>Game Instructions</strong><br />\n        Click on a snapshot to earn points, but don't click more than once!\n    </Popover>\n);\n// PROPS: Header\nconst Header = props => (\n    <header className=\"header row\">\n        <div className=\"col-lg-3\"></div>\n        <div className=\"col-lg-6 text-center\">\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={popoverLeft}>\n                <Button className=\"logo-button btn-dark\">\n                <h1>click.</h1>\n                    {/* <img src=\"./images/logo.png\" className=\"bobs-burgers\" alt=\"Bob's Burgers Logo\"/> */}\n                </Button>\n            </OverlayTrigger>\n        </div>\n        <div className=\"col-lg-3 center\">\n        <div className=\"heart\">&#x2665;</div>\n        </div>\n    </header>\n)\n// EXPORT DEFAULT: Header\nexport default Header;","\n// IMPORTS\nimport React from 'react';\nimport './Alerts.css';\nimport Alert from 'react-bootstrap/lib/Alert';\n\nconst Alerts = props => (\n    <Alert bsStyle={`${props.alertType}`}>\n        <h3>\n            <strong>{props.message1}</strong> {props.message2}\n        </h3>\n    </Alert>\n);\n\nexport default Alerts;","\n// IMPORTS\nimport React from 'react';\nimport \"./Score.css\";\n// PROPS: Navbar\nconst Score = props => (\n    <div className=\"row\">\n        <div className=\"col-lg-2\"></div>\n        <div className=\"col-lg-8\"></div>\n        <div className=\"col-lg-2\">\n            <button id={props.shake} className={`btn btn-block btn-score btn-${props.alertType}`}>\n                <h3>Score <span className=\"badge\">{props.score}</span></h3>\n            </button>\n            <button className={`btn btn-block btn-score btn-${props.topScoreType}`}>\n                <h3>Top Score <span className=\"badge\">{props.topScore}</span></h3>\n            </button>\n        </div>\n    </div>\n)\n// EXPORT DEFAULT: Score\nexport default Score;","\n// IMPORTS\nimport React from 'react';\nimport \"./Main.css\";\n// PROPS: Main\nconst Main = props => (\n    <main className={`${props.shake}`}>\n        <div className=\"container\">\n            {props.children}\n        </div>\n    </main>\n)\n// EXPORT DEFAULT: Main\nexport default Main;","// IMPORTS\nimport React from 'react';\nimport \"./Footer.css\";\n// PROPS: Footer\nconst Footer = props => (\n    <table>\n        <tbody>\n            <tr>\n                <td className=\"align-middle\">\n                    <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-react fa-2x\"></i>\n                    </a>\n                    <a href=\"https://github.com/AthenaOlson/clicky-game\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-github fa-2x\"></i>\n                    </a>\n                    <div className=\"spacer\"></div>\n                    Athena Olson 2018 Â©\n                </td>\n            </tr>\n        </tbody>\n    </table>\n)\n// EXPORT DEFAULT: Footer\nexport default Footer;","\n// IMPORTS\nimport React from \"react\";\nimport \"./Card.css\";\n// PROPS: Card\nconst Card = props => (\n    <div className=\"click-item neutral\" onClick = {() => { props.increment(props.id); props.shuffle(props.id); }}>\n        <img className=\"card-image\" src={props.image} alt={props.name}/>\n    </div>\n);\n// EXPORT DEFAULT: Card\nexport default Card;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from '../Header/Header.js';\nimport Alerts from '../Alerts/Alerts.js';\nimport Score from '../Score/Score.js';\nimport Main from '../Main/Main.js';\nimport Footer from '../Footer/Footer.js';\nimport Card from '../Card/Card.js';\nimport cards from '../../assets/json/cards.json';\n\nclass App extends Component {\n  // STATE    \n  state = {\n    cards,\n    score: 0,\n    topScore: 0,\n    selected: [],\n    shake: \"\",\n    message1: \"Click an image to begin!\",\n    message2: \"\",\n    alertType: \"info\",\n    topScoreType: \"info\",\n};\n\n// ON CLICK: SHUFFLE CARDS\nshuffle = id => {\n  this.setState({\n    cards: this.state.cards.sort(function(a,b){\n      return 0.5 - Math.random();\n    })   \n  })\n};\n\n// ON CLICK: INCREMENT COUNT ON CARD\nincrementClick = id => {\n  let ids = this.state.selected\n  const incorrect = ids.includes(id);\n\n    if(!incorrect){\n      this.state.selected.push(id);\n      let newScore = this.state.score + 1;\n      this.setState({score: newScore});\n\n    if(newScore === 12){\n      this.setState({\n        score: 0,\n        selected: [],\n        topScore: newScore,\n        message1: \"You win!\",\n        message2: \"\",\n        alertType: \"success\"\n      });\n    }\n\n    else if(newScore > this.state.topScore){\n      this.setState({\n        topScore: newScore, \n        message1: \"YES!\",\n        message2: \"You guessed correctly!\",\n        alertType: \"success\",\n        topScoreType: \"success\"\n      });\n    }\n\n    else{\n      this.setState({\n        message1: \"YES!\",\n        message2: \"You guessed correctly!\",\n        alertType: \"success\",\n        topScoreType: \"info\"\n      });\n    }\n    }\n    else{\n        this.setState({\n            score: 0,\n            selected: [], \n            shake: \"incorrect\",\n            message1: \"WRONG!\",\n            message2: \"Start over and try again!\",\n            alertType: \"danger\",\n            topScoreType: \"info\"\n        });\n        setTimeout(function(){ \n            this.setState({ shake: \"\" }); \n        }.bind(this), 1000);\n    }\n};\n  render(){\n    return(\n      <div className=\"App\">\n        <Header/>\n        <Alerts\n          message1={this.state.message1}\n          message2={this.state.message2}\n          alertType={this.state.alertType}\n        />\n        <Score \n          shake={this.state.shake}\n          score={this.state.score} \n          topScore={this.state.topScore}\n          alertType={this.state.alertType}\n          topScoreType={this.state.topScoreType}\n        />\n        <Main\n          shake={this.state.shake}\n        >\n          {this.state.cards.map((cards,i) => (\n            <Card\n              id={cards.id}\n              name={cards.name}\n              image={cards.image}\n              key={i}\n              increment={this.incrementClick} shuffle={this.shuffle}\n            />\n            ))}\n          </Main>\n          <Footer/>\n        </div>\n    );\n  };\n}\n// EXPORT DEFAULT: App\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}